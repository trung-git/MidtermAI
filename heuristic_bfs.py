# -*- coding: utf-8 -*-
"""Heuristic_BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WoC5EU-ZllSIMLeMyaVDYsbBKC-H4x8r
"""

from queue import PriorityQueue


class node:
    def __init__(self, v):
        self.V = v
        self.E = []

    def add_edge(self, e, w):
        self.E = [e, w]


class graph:
    def __init__(self):
        self.G = {}

    def add_vertice(self, v):

        if(v.V not in self.G):
            self.G[v.V] = []
        self.G[v.V].append(v.E)

        if(v.E[0] not in self.G):
            self.G[v.E[0]] = []

        self.G[v.E[0]].append([v.V, v.E[1]])

    def show_graph(self):
        for i in self.G:
            print(i, " : ", self.G[i])


def initRomania():
    Romania = graph()

    Oradea1 = node("Oradea")
    Oradea1.add_edge("Zerind", 71)
    Oradea2 = node("Oradea")
    Oradea2.add_edge("Sibiu", 151)
    Romania.add_vertice(Oradea1)
    Romania.add_vertice(Oradea2)

    Zerind = node("Zerind")
    Zerind.add_edge("Arad", 75)
    Romania.add_vertice(Zerind)

    Arad1 = node("Arad")
    Arad1.add_edge("Timisoara", 118)
    Arad2 = node("Arad")
    Arad2.add_edge("Sibiu", 140)
    Romania.add_vertice(Arad1)
    Romania.add_vertice(Arad2)

    Timisoara = node("Timisoara")
    Timisoara.add_edge("Lugoj", 111)
    Romania.add_vertice(Timisoara)

    Sibiu1 = node("Sibiu")
    Sibiu1.add_edge("Fagaras", 99)
    Sibiu2 = node("Sibiu")
    Sibiu2.add_edge("Rimnicu Vilcea", 80)
    Romania.add_vertice(Sibiu1)
    Romania.add_vertice(Sibiu2)

    Fagaras = node("Fagaras")
    Fagaras.add_edge("Bucharest", 211)
    Romania.add_vertice(Fagaras)

    Rimnicu1 = node("Rimnicu Vilcea")
    Rimnicu1.add_edge("Pitesti", 97)
    Rimnicu2 = node("Rimnicu Vilcea")
    Rimnicu2.add_edge("Craiova", 146)
    Romania.add_vertice(Rimnicu1)
    Romania.add_vertice(Rimnicu2)

    Lugoj = node("Lugoj")
    Lugoj.add_edge("Mehadia", 70)
    Romania.add_vertice(Lugoj)

    Mehadia = node("Mehadia")
    Mehadia.add_edge("Dobreta", 75)
    Romania.add_vertice(Mehadia)

    Dobreta = node("Dobreta")
    Dobreta.add_edge("Craiova", 120)
    Romania.add_vertice(Dobreta)

    Craiova = node("Craiova")
    Craiova.add_edge("Pitesti", 138)
    Romania.add_vertice(Craiova)

    Pitesti = node("Pitesti")
    Pitesti.add_edge("Bucharest", 101)
    Romania.add_vertice(Pitesti)

    Bucharest1 = node("Bucharest")
    Bucharest1.add_edge("Giurgiu", 90)
    Bucharest2 = node("Bucharest")
    Bucharest2.add_edge("Urziceni", 85)
    Romania.add_vertice(Bucharest1)
    Romania.add_vertice(Bucharest2)

    Urziceni1 = node("Urziceni")
    Urziceni1.add_edge("Hirsova", 98)
    Urziceni2 = node("Urziceni")
    Urziceni2.add_edge("Vaslui", 142)
    Romania.add_vertice(Urziceni1)
    Romania.add_vertice(Urziceni2)

    Hirsova = node("Hirsova")
    Hirsova.add_edge("Eforie", 86)
    Romania.add_vertice(Hirsova)

    Vaslui = node("Vaslui")
    Vaslui.add_edge("Iasi", 92)
    Romania.add_vertice(Vaslui)

    Iasi = node("Iasi")
    Iasi.add_edge("Neamt", 87)
    Romania.add_vertice(Iasi)

    Romania.G["Arad"].append(366)
    Romania.G["Bucharest"].append(0)
    Romania.G["Craiova"].append(160)
    Romania.G["Dobreta"].append(242)
    Romania.G["Eforie"].append(161)
    Romania.G["Fagaras"].append(176)
    Romania.G["Giurgiu"].append(77)
    Romania.G["Hirsova"].append(151)
    Romania.G["Iasi"].append(226)
    Romania.G["Lugoj"].append(244)
    Romania.G["Mehadia"].append(241)
    Romania.G["Neamt"].append(234)
    Romania.G["Oradea"].append(380)
    Romania.G["Pitesti"].append(100)
    Romania.G["Rimnicu Vilcea"].append(193)
    Romania.G["Sibiu"].append(253)
    Romania.G["Timisoara"].append(329)
    Romania.G["Urziceni"].append(80)
    Romania.G["Vaslui"].append(199)
    Romania.G["Zerind"].append(374)

    
    return Romania


class Heuristic_Node:
    def __init__(self, node, par=None, h=0):
        self.node = node
        self.par = par
        self.h = h

    def display(self):
        print(self.node, self.h)

    def __lt__(self, other):
        if (other == None):
            return False
        return self.h < other.h

    def __eq__(self, other):
        if (other == None):
            return False
        return self.h == other.h


def equal(a, b):
    if(a.node == b.node):
        return True
    return False


def isInPQ(a, q):
    if (a == None):
        return False
    return a in q.queue


def getPath(a, d):
    print(a.node)
    d += a.h
    if (a.par != None):
        getPath(a.par, d)
    else:
        print("Distance : ", d)
        return


def BFS_Heuristic(start, end, data):
    OPEN = PriorityQueue()
    CLOSED = PriorityQueue()

    S = Heuristic_Node(start)
    E = Heuristic_Node(end)
    S.h = data[S.node][-1]
    
    OPEN.put(S)
    while True:
        if (OPEN.empty()):
            print("FAIL!")
            return

        O = OPEN.get()
        CLOSED.put(O)
        ##print("Duyet : ", O.node, O.h)

        if(equal(O, E)):
            print("DONE")
            d = 0
            getPath(O, d)
            return

        for i in range(len(data[O.node]) - 1):

            name_temp = data[O.node][i][0]
            h_temp = data[name_temp][-1]

            temp = Heuristic_Node(name_temp)
            temp.par = O
            temp.h = h_temp
            if(isInPQ(temp, CLOSED) == False and isInPQ(temp, OPEN) == False):
                OPEN.put(temp)


if __name__ == "__main__":
    Romania = initRomania()
    Romania.show_graph()
    print()
    BFS_Heuristic("Arad", "Bucharest", Romania.G)