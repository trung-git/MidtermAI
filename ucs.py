# -*- coding: utf-8 -*-
"""UCS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eRKynBLKti2AGtcEVFpGu9BDzbPzMAyN
"""

from queue import PriorityQueue
import random
class island():
  def __init__(self):
    self.grid = []
  def display(self):
    print("Display island : ")
    for i in self.grid:
        print(i)

class node():
  def __init__(self,g = 0 ):
    self.node = []
    self.g = g
  def __lt__(self,other):
        if (other == None):
            return False
        return self.g < other.g
  def __eq__(self,other):
        if (other == None):
            return False
        return self.node == other.node

 
def UCS(grid):
  if(grid == None or len(grid) == 0):
    print("Island is empty")
    return
  countIsland = 0
  row = len(grid)
  col = len(grid[0])
  visited = [[False for i in range(row)] for i in range(col)]
  moveDirections = [(1,0),(0,1),(-1,0),(0,-1),(-1,-1),(-1,1),(1,-1),(1,1)]


  PQ = PriorityQueue()
  for i in range(row):
    for j in range(col):
      if(grid[i][j] == 1 and visited[i][j] == False):
        A = node()
        A.node = [i,j]
        countIsland += 1
        PQ.put(A)
        visited[i][j] = True
        grid[i][j] = countIsland

        while(len(PQ.queue)> 0) :
          current = PQ.get()
          ##print("*******Current : ",current.node,countIsland,current.g)
          for direct in moveDirections:
            
            temp_row = current.node[0] + direct[0]
            temp_col = current.node[1] + direct[1]
            ##print("++++Direct: ",direct)
            if(temp_row >= 0 and temp_row < row and temp_col < col and temp_col >= 0 ):
              if(grid[temp_row][temp_col] == 1 and visited[temp_row][temp_col] == False):
                random_priority = random.choice(list(range(10)))
                temp = node()
                temp.node = [temp_row,temp_col]
                temp.g = current.g + random_priority
                ##print("Temp :",[temp_row,temp_col],countIsland,temp.g )
                PQ.put(temp)
                grid[temp_row][temp_col] = countIsland
                visited[temp_row][temp_col] = True

  return countIsland






if __name__ == "__main__" :
  data = [[1,0,1,0,0,0,1,1,1,1],
          [0,0,1,0,0,0,1,0,0,0],
          [1,1,1,1,0,0,1,0,0,0],
          [1,0,0,1,0,1,0,0,0,0],
          [1,1,1,1,0,0,0,1,1,1],
          [0,1,0,1,0,0,1,1,1,1],
          [0,0,0,0,0,1,1,1,0,0],
          [0,0,0,1,0,0,1,1,1,0],
          [1,0,1,0,1,0,0,1,0,0],
          [1,1,1,1,0,0,0,1,1,1]]
  island = island()
  island.grid = data
  island.display()
  c = UCS(island.grid)
  island.display()